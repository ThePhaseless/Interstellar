apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose -f ./compose.yaml convert
    kompose.version: 1.34.0 (cbf2835db)
    subdomain: watch
    traefik.enable: "true"
    traefik.http.routers.jellyfin.middlewares: crowdsec,default-headers
    traefik.http.services.jellyfin.loadbalancer.server.port: "8096"
  labels:
    io.kompose.service: jellyfin
  name: jellyfin
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: jellyfin
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose -f ./compose.yaml convert
        kompose.version: 1.34.0 (cbf2835db)
        subdomain: watch
        traefik.enable: "true"
        traefik.http.routers.jellyfin.middlewares: crowdsec,default-headers
        traefik.http.services.jellyfin.loadbalancer.server.port: "8096"
      labels:
        io.kompose.service: jellyfin
    spec:
      containers:
        - env:
            - name: DOCKER_MODS
              value: linuxserver/mods:jellyfin-opencl-intel
            - name: JELLYFIN_PublishedServerUrl
              value: watch.nerine.dev
            - name: TZ
              value: Europe/Warsaw
          image: linuxserver/jellyfin:10.10.7
          name: jellyfin
          ports:
            - containerPort: 8096
              protocol: TCP
            - containerPort: 7359
              protocol: UDP
            - containerPort: 1900
              protocol: UDP
          volumeMounts:
            - mountPath: /config
              name: jellyfin-claim0
            - mountPath: /data
              name: jellyfin-claim1
      restartPolicy: Always
      volumes:
        - name: jellyfin-claim0
          persistentVolumeClaim:
            claimName: jellyfin-claim0
        - name: jellyfin-claim1
          persistentVolumeClaim:
            claimName: jellyfin-claim1
