name: Apply Ansible Playbook on Proxmox Containers
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Deploy Terraform Infrastructure"]
    types:
      - completed
  push:
    branches:
      - main
    paths:
      - "Ansible/**"
      - "Config/**"
      - ".github/workflows/ansible-containers.yaml"

concurrency:
  group: ansible-containers
  cancel-in-progress: true

jobs:
  check-artifact:
    runs-on: ubuntu-latest
    environment: server
    outputs:
      download-artifact: ${{ steps.download-artifact.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download encrypted artifacts
        uses: actions/download-artifact@v4
        id: download-artifact
        continue-on-error: true
        with:
          name: encrypted-ansible-files-${{hashFiles( 'Terraform/**' )}}
  deploy:
    runs-on: ubuntu-latest
    environment: server
    needs: check-artifact
    if: needs.check-artifact.outputs.download-artifact == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download encrypted artifacts
        uses: actions/download-artifact@v4
        with:
          name: encrypted-ansible-files-${{hashFiles( 'Terraform/**' )}}
          path: .

      - name: Decrypt sensitive files
        run: |
          # Decrypt inventory.ini if encrypted version exists
          if [ -f "Ansible/inventory.ini.gpg" ]; then
            gpg --decrypt --batch --yes --passphrase "${{ secrets.GPG_SECRET }}" --output Ansible/inventory.ini Ansible/inventory.ini.gpg
            chmod 600 Ansible/inventory.ini
          fi
          # Decrypt deployment key if encrypted version exists
          if [ -f "Keys/deployment_key.pem.gpg" ]; then
            gpg --decrypt --batch --yes --passphrase "${{ secrets.GPG_SECRET }}" --output Keys/deployment_key.pem Keys/deployment_key.pem.gpg
            chmod 600 Keys/deployment_key.pem
          fi

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          enable-cache: true

      - name: Install Project Dependencies
        run: uv sync --locked

      - name: Run Ansible Lint
        run: ansible-lint
        working-directory: Ansible

      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: latest

      - name: Ansible Requirements
        run: ansible-galaxy install -r requirements.yml
        working-directory: Ansible

      - name: Ansible Playbook (Containers)
        run: ansible-playbook site-containers.yaml --extra-vars "tailscale_authkey=${{ secrets.TS_PROXMOX_OAUTH_SECRET }}"
        working-directory: Ansible
