---
- name: Check which devices exist
  ansible.builtin.stat:
    path: "{{ item }}"
  register: device_stats
  loop: "{{ container_devices }}"
  loop_control:
    label: "{{ item }}"

- name: Filter out devices that do not exist
  ansible.builtin.set_fact:
    present_devices: "{{ device_stats.results | selectattr('stat.exists', 'equalto', true) | map(attribute='item') | list }}"

- name: Create config lines
  ansible.builtin.set_fact:
    container_config_lines: "{{ container_config_lines | default([]) + ['dev' + (item | string) + ': ' + (present_devices[(item | int)] | string)] }}"
  loop: "{{ range(0, present_devices | length) | list }}"

- name: Add configuration to container config file
  register: container_config
  ansible.builtin.lineinfile:
    path: "/etc/pve/lxc/{{ container_id }}.conf"
    line: "{{ item }}"
  loop: "{{ container_config_lines }}"

- name: Check if container is running
  register: container_status
  changed_when: false
  ansible.builtin.command: "pct status {{ container_id }} | grep 'status: running'"
  failed_when: container_status.rc not in [0,1]

- name: Restart container if configuration changed
  tags: skip_ansible_lint
  ansible.builtin.command: "pct reboot {{ container_id }}"
  when: container_config.changed and container_status.rc == 0
  changed_when: true

- name: Wait for container to be ready after restart
  tags: skip_ansible_lint
  ansible.builtin.wait_for:
    host: "{{ proxmox_containers_ip_map[container_id] }}"
    port: 22
    timeout: 60
  when: container_config.changed
